//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param body (optional) 
     * @return Success
     */
    legalEntityPOST(body: LegalEntityVm | undefined , cancelToken?: CancelToken | undefined): Promise<LegalEntityVmResponseVm> {
        let url_ = this.baseUrl + "/api/LegalEntity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLegalEntityPOST(_response);
        });
    }

    protected processLegalEntityPOST(response: AxiosResponse): Promise<LegalEntityVmResponseVm> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LegalEntityVmResponseVm.fromJS(resultData200);
            return Promise.resolve<LegalEntityVmResponseVm>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LegalEntityVmResponseVm>(null as any);
    }

    /**
     * @return Success
     */
    legalEntityGET(  cancelToken?: CancelToken | undefined): Promise<LegalEntityVmIListResponseVm> {
        let url_ = this.baseUrl + "/api/LegalEntity";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLegalEntityGET(_response);
        });
    }

    protected processLegalEntityGET(response: AxiosResponse): Promise<LegalEntityVmIListResponseVm> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LegalEntityVmIListResponseVm.fromJS(resultData200);
            return Promise.resolve<LegalEntityVmIListResponseVm>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LegalEntityVmIListResponseVm>(null as any);
    }

    /**
     * @return Success
     */
    legalEntityDELETE(id: number , cancelToken?: CancelToken | undefined): Promise<BaseResponseVm> {
        let url_ = this.baseUrl + "/api/LegalEntity/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLegalEntityDELETE(_response);
        });
    }

    protected processLegalEntityDELETE(response: AxiosResponse): Promise<BaseResponseVm> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BaseResponseVm.fromJS(resultData200);
            return Promise.resolve<BaseResponseVm>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BaseResponseVm>(null as any);
    }

    /**
     * @return Success
     */
    legalEntityGET2(id: number , cancelToken?: CancelToken | undefined): Promise<LegalEntityVmResponseVm> {
        let url_ = this.baseUrl + "/api/LegalEntity/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLegalEntityGET2(_response);
        });
    }

    protected processLegalEntityGET2(response: AxiosResponse): Promise<LegalEntityVmResponseVm> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LegalEntityVmResponseVm.fromJS(resultData200);
            return Promise.resolve<LegalEntityVmResponseVm>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LegalEntityVmResponseVm>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    personPOST(body: PersonVm | undefined , cancelToken?: CancelToken | undefined): Promise<PersonVmResponseVm> {
        let url_ = this.baseUrl + "/api/Person";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPersonPOST(_response);
        });
    }

    protected processPersonPOST(response: AxiosResponse): Promise<PersonVmResponseVm> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonVmResponseVm.fromJS(resultData200);
            return Promise.resolve<PersonVmResponseVm>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonVmResponseVm>(null as any);
    }

    /**
     * @return Success
     */
    personGET(  cancelToken?: CancelToken | undefined): Promise<PersonVmIListResponseVm> {
        let url_ = this.baseUrl + "/api/Person";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPersonGET(_response);
        });
    }

    protected processPersonGET(response: AxiosResponse): Promise<PersonVmIListResponseVm> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonVmIListResponseVm.fromJS(resultData200);
            return Promise.resolve<PersonVmIListResponseVm>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonVmIListResponseVm>(null as any);
    }

    /**
     * @return Success
     */
    personDELETE(id: number , cancelToken?: CancelToken | undefined): Promise<BaseResponseVm> {
        let url_ = this.baseUrl + "/api/Person/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPersonDELETE(_response);
        });
    }

    protected processPersonDELETE(response: AxiosResponse): Promise<BaseResponseVm> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BaseResponseVm.fromJS(resultData200);
            return Promise.resolve<BaseResponseVm>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BaseResponseVm>(null as any);
    }

    /**
     * @return Success
     */
    personGET2(id: number , cancelToken?: CancelToken | undefined): Promise<PersonVmResponseVm> {
        let url_ = this.baseUrl + "/api/Person/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPersonGET2(_response);
        });
    }

    protected processPersonGET2(response: AxiosResponse): Promise<PersonVmResponseVm> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonVmResponseVm.fromJS(resultData200);
            return Promise.resolve<PersonVmResponseVm>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonVmResponseVm>(null as any);
    }

    /**
     * @return Success
     */
    getWeatherForecast(  cancelToken?: CancelToken | undefined): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetWeatherForecast(_response);
        });
    }

    protected processGetWeatherForecast(response: AxiosResponse): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<WeatherForecast[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export class BaseResponseVm implements IBaseResponseVm {
    success?: boolean;
    readonly generatedAt?: Date;
    userMessage?: string | undefined;
    systemMessage?: string | undefined;

    constructor(data?: IBaseResponseVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            (<any>this).generatedAt = _data["generatedAt"] ? new Date(_data["generatedAt"].toString()) : <any>undefined;
            this.userMessage = _data["userMessage"];
            this.systemMessage = _data["systemMessage"];
        }
    }

    static fromJS(data: any): BaseResponseVm {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResponseVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["generatedAt"] = this.generatedAt ? this.generatedAt.toISOString() : <any>undefined;
        data["userMessage"] = this.userMessage;
        data["systemMessage"] = this.systemMessage;
        return data;
    }
}

export interface IBaseResponseVm {
    success?: boolean;
    generatedAt?: Date;
    userMessage?: string | undefined;
    systemMessage?: string | undefined;
}

export enum LegalEntityType {
    _0 = 0,
    _1 = 1,
}

export class LegalEntityVm implements ILegalEntityVm {
    id?: number;
    name?: string | undefined;
    membershipType?: MembershipType;
    legalEntityType?: LegalEntityType;
    votes?: number;
    createdOn?: Date | undefined;
    modifiedOn?: Date | undefined;

    constructor(data?: ILegalEntityVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.membershipType = _data["membershipType"];
            this.legalEntityType = _data["legalEntityType"];
            this.votes = _data["votes"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.modifiedOn = _data["modifiedOn"] ? new Date(_data["modifiedOn"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LegalEntityVm {
        data = typeof data === 'object' ? data : {};
        let result = new LegalEntityVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["membershipType"] = this.membershipType;
        data["legalEntityType"] = this.legalEntityType;
        data["votes"] = this.votes;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["modifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>undefined;
        return data;
    }
}

export interface ILegalEntityVm {
    id?: number;
    name?: string | undefined;
    membershipType?: MembershipType;
    legalEntityType?: LegalEntityType;
    votes?: number;
    createdOn?: Date | undefined;
    modifiedOn?: Date | undefined;
}

export class LegalEntityVmIListResponseVm implements ILegalEntityVmIListResponseVm {
    success?: boolean;
    readonly generatedAt?: Date;
    userMessage?: string | undefined;
    systemMessage?: string | undefined;
    data?: LegalEntityVm[] | undefined;

    constructor(data?: ILegalEntityVmIListResponseVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            (<any>this).generatedAt = _data["generatedAt"] ? new Date(_data["generatedAt"].toString()) : <any>undefined;
            this.userMessage = _data["userMessage"];
            this.systemMessage = _data["systemMessage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(LegalEntityVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LegalEntityVmIListResponseVm {
        data = typeof data === 'object' ? data : {};
        let result = new LegalEntityVmIListResponseVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["generatedAt"] = this.generatedAt ? this.generatedAt.toISOString() : <any>undefined;
        data["userMessage"] = this.userMessage;
        data["systemMessage"] = this.systemMessage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILegalEntityVmIListResponseVm {
    success?: boolean;
    generatedAt?: Date;
    userMessage?: string | undefined;
    systemMessage?: string | undefined;
    data?: LegalEntityVm[] | undefined;
}

export class LegalEntityVmResponseVm implements ILegalEntityVmResponseVm {
    success?: boolean;
    readonly generatedAt?: Date;
    userMessage?: string | undefined;
    systemMessage?: string | undefined;
    data?: LegalEntityVm;

    constructor(data?: ILegalEntityVmResponseVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            (<any>this).generatedAt = _data["generatedAt"] ? new Date(_data["generatedAt"].toString()) : <any>undefined;
            this.userMessage = _data["userMessage"];
            this.systemMessage = _data["systemMessage"];
            this.data = _data["data"] ? LegalEntityVm.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LegalEntityVmResponseVm {
        data = typeof data === 'object' ? data : {};
        let result = new LegalEntityVmResponseVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["generatedAt"] = this.generatedAt ? this.generatedAt.toISOString() : <any>undefined;
        data["userMessage"] = this.userMessage;
        data["systemMessage"] = this.systemMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILegalEntityVmResponseVm {
    success?: boolean;
    generatedAt?: Date;
    userMessage?: string | undefined;
    systemMessage?: string | undefined;
    data?: LegalEntityVm;
}

export enum MembershipType {
    _0 = 0,
    _1 = 1,
}

export class PersonVm implements IPersonVm {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    patronymic?: string | undefined;
    createdOn?: Date | undefined;
    modifiedOn?: Date | undefined;
    legalEntityId?: number;
    legalEntity?: LegalEntityVm;

    constructor(data?: IPersonVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.patronymic = _data["patronymic"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.modifiedOn = _data["modifiedOn"] ? new Date(_data["modifiedOn"].toString()) : <any>undefined;
            this.legalEntityId = _data["legalEntityId"];
            this.legalEntity = _data["legalEntity"] ? LegalEntityVm.fromJS(_data["legalEntity"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonVm {
        data = typeof data === 'object' ? data : {};
        let result = new PersonVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["patronymic"] = this.patronymic;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["modifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>undefined;
        data["legalEntityId"] = this.legalEntityId;
        data["legalEntity"] = this.legalEntity ? this.legalEntity.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPersonVm {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    patronymic?: string | undefined;
    createdOn?: Date | undefined;
    modifiedOn?: Date | undefined;
    legalEntityId?: number;
    legalEntity?: LegalEntityVm;
}

export class PersonVmIListResponseVm implements IPersonVmIListResponseVm {
    success?: boolean;
    readonly generatedAt?: Date;
    userMessage?: string | undefined;
    systemMessage?: string | undefined;
    data?: PersonVm[] | undefined;

    constructor(data?: IPersonVmIListResponseVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            (<any>this).generatedAt = _data["generatedAt"] ? new Date(_data["generatedAt"].toString()) : <any>undefined;
            this.userMessage = _data["userMessage"];
            this.systemMessage = _data["systemMessage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PersonVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PersonVmIListResponseVm {
        data = typeof data === 'object' ? data : {};
        let result = new PersonVmIListResponseVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["generatedAt"] = this.generatedAt ? this.generatedAt.toISOString() : <any>undefined;
        data["userMessage"] = this.userMessage;
        data["systemMessage"] = this.systemMessage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPersonVmIListResponseVm {
    success?: boolean;
    generatedAt?: Date;
    userMessage?: string | undefined;
    systemMessage?: string | undefined;
    data?: PersonVm[] | undefined;
}

export class PersonVmResponseVm implements IPersonVmResponseVm {
    success?: boolean;
    readonly generatedAt?: Date;
    userMessage?: string | undefined;
    systemMessage?: string | undefined;
    data?: PersonVm;

    constructor(data?: IPersonVmResponseVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            (<any>this).generatedAt = _data["generatedAt"] ? new Date(_data["generatedAt"].toString()) : <any>undefined;
            this.userMessage = _data["userMessage"];
            this.systemMessage = _data["systemMessage"];
            this.data = _data["data"] ? PersonVm.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonVmResponseVm {
        data = typeof data === 'object' ? data : {};
        let result = new PersonVmResponseVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["generatedAt"] = this.generatedAt ? this.generatedAt.toISOString() : <any>undefined;
        data["userMessage"] = this.userMessage;
        data["systemMessage"] = this.systemMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPersonVmResponseVm {
    success?: boolean;
    generatedAt?: Date;
    userMessage?: string | undefined;
    systemMessage?: string | undefined;
    data?: PersonVm;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}